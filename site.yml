- hosts: all
  tasks:
    - name: Abort if the host is not booted from the Arch install media
      fail:
        msg: "This host is not booted from the Arch install media!"
      when: ansible_nodename != 'archiso'
      tags:
        - quick_exit
    - name: Synchronize clock via NTP
      command: timedatectl set-ntp true
      tags:
        - sync_clock
    - name: wipe drives
      command: find /dev -wholename "/dev/{{ item.device }}*" -exec wipefs --force --all {} \; 
      loop: '{{ partition_table }}'
    - name: Repartition install drive
      parted:
        device: "{{ item.0.device }}"
        label: gpt
        number: "{{ item.1.number }}"
        part_start: "{{ item.1.part_start | default('0%') }}"
        part_end: "{{ item.1.part_end | default('100%') }}"
        name: "{{ item.1.name }}"
        flags: "{{ item.1.flags }}"
        state: present 
      with_subelements:
        - "{{ partition_table }}"
        - settings
    - name: Create filesystems
      filesystem:
        dev: "{{ item.value.device }}"
        fstype: "{{ item.value.fstype }}"
        force: yes
      with_dict: "{{ mount_points }}"
      when: item.value.format == "yes"
    - name: Mount filesystems
      mount:
        src: "{{ item.value.device }}"
        fstype: "{{ item.value.fstype }}"
        path: "{{ item.value.path }}"
        state: "mounted"
      with_dict: "{{ mount_points }}"
      tags:
        - mount_filesystems
    - name: Rank Arch mirrors
      block:
        - name: Install the pacman-contrib package (for rankmirrors)
          pacman:
            name:
              - pacman-contrib
            update_cache: yes
        - name: Use rankmirrors to filter the fastest mirrors that support HTTPS
          shell: curl -s "https://archlinux.org/mirrorlist/all/https/" | sed -e 's/^#Server/Server/' -e '/^#/d' | rankmirrors -n 5 - > /etc/pacman.d/mirrorlist
            warn=false
      tags:
        - mirrors
    - name: Run pacstrap
      command: pacstrap /mnt base dhclient dhcpcd efibootmgr grub linux linux-firmware lvm2 netctl openssh python sudo
      tags:
        - pacstrap
    - name: Generate fstab
      shell:
        cmd: genfstab -U /mnt >> /mnt/etc/fstab
    - name: Set local timezone
      command: arch-chroot /mnt ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
      tags:
        - timezone
    - name: Generate adjtime file
      command: arch-chroot /mnt hwclock --systohc
      tags:
        - adjtime
    - name: Setup locales
      block:
        - name: Configure locale.gen
          lineinfile:
            dest: /mnt/etc/locale.gen
            regexp: '{{ item.regex }}'
            line: '{{ item.line }}'
          loop:
            - {regex: en_US\.UTF-8 UTF-8, line: en_US.UTF-8 UTF-8}
            - {regex: en_US ISO-8859-1, line: en_US ISO-8859-1}
        - name: Create locale.conf
          copy:
            content: "LANG=en_US.UTF-8"
            dest: /mnt/etc/locale.conf
        - name: Generate locales
          command: arch-chroot /mnt locale-gen
      tags:
        - locales
    - name: Set hostname
      copy:
        content: '{{ inventory_hostname }}'
        dest: /mnt/etc/hostname
      tags:
        - hostname
    - name: Setup netctl
      block:
        - name: Create netctl profile for wired connection
          copy:
            content: |
              Description='Wired with DHCP'
              Interface={{ item }}
              Connection=ethernet
              IP=dhcp
              IP6=dhcp-noaddr
              # IPv6 traffic is tunneled over IPv4, which eats 20 bytes of the MTU.
              ExecUpPost='/usr/bin/ip link set {{ item }} mtu 1480'
            dest: /mnt/etc/netctl/{{ item }}
          loop: "{{ network }}"
        - name: Enable wired netctl profile
          command: arch-chroot /mnt netctl enable "{{ item }}"
          loop: "{{ network }}"
      tags:
        - netctl
    - name: Enable sshd
      command: arch-chroot /mnt systemctl enable sshd
      tags:
        - sshd
    - name: Set up initramfs
      block:
        - name: Add mkinitcpio.conf hooks
          lineinfile:
            dest: /mnt/etc/mkinitcpio.conf
            regexp: ^HOOKS=
            line: HOOKS=(base udev autodetect keyboard keymap modconf block filesystems fsck)
        - name: Create new initramfs
          command: arch-chroot /mnt mkinitcpio -p linux
      tags:
        - initramfs
        - mkinitcpio
    - name: Set up grub
      block:
        - name: Install grub
          command: arch-chroot /mnt grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
        - name: Create grub config
          command: arch-chroot /mnt grub-mkconfig -o /boot/grub/grub.cfg
      tags:
        - grub
    - name: Setup user account
      block:
        - name: Create user account
          command: arch-chroot /mnt useradd --create-home --user-group --groups wheel {{ user_name }} --password {{ user_password }}
        - name: Create user's ssh directory
          file:
            path: /mnt/home/{{ user_name }}/.ssh
            state: directory
        - name: Set mode, owner, and group on user's ssh directory
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0700 /home/{{ user_name }}/.ssh
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh
        - name: Copy over ssh key from current Ansible controller as an authorized key
          copy:
            src: '{{ lookup("env", "HOME") }}/.ssh/id_ed25519.pub'
            dest: /mnt/home/{{ user_name }}/.ssh/authorized_keys
        - name: Set mode, owner, and group on user's authorized_key file
          command: arch-chroot /mnt {{ item }}
          loop:
            - chmod 0600 /home/{{ user_name }}/.ssh/authorized_keys
            - chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh/authorized_keys
      tags:
        - user_account
    - name: Give passwordless sudo access to wheel group
      copy:
        content: '%wheel ALL=(ALL) NOPASSWD: ALL'
        dest: /mnt/etc/sudoers.d/wheel
        validate: /usr/sbin/visudo --check --file=%s
      tags:
        - sudo
    - name: Reboot
      reboot:
        connect_timeout: 1
        reboot_timeout: 1
      failed_when: false
      tags:
        - reboot
